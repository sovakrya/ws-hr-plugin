{"version":3,"file":"App-DKkXuvYh.mjs","sources":["../../admin/src/api/plugin.ts","../../admin/src/pages/HomePage.tsx","../../admin/src/pages/App.tsx"],"sourcesContent":["export type Speciality = {\n  id: number;\n  name: string;\n  activity: boolean;\n  documentId: string;\n  tasks: Task[];\n};\n\ntype Task = {\n  id: number;\n  documentId: string;\n  activity: boolean;\n  name: string;\n  taskText: string;\n};\n\ntype DataSpeciality = {\n  data: Speciality[];\n  meta: {\n    pagination: {\n      page: number;\n      pageSize: number;\n      pageCount: number;\n      total: number;\n    };\n  };\n};\n\nexport async function getSpecialities(): Promise<DataSpeciality> {\n  const resp = await fetch('http://localhost:1337/api/specialities?populate=*');\n\n  return resp.json();\n}\n\nexport async function addUUID(speciality: string) {\n  const resp = await fetch(\"http://localhost:1337/api/task-links\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      speciality: speciality\n    })\n  })\n\n  return resp.json()\n}\n","import {\n  Main,\n  Typography,\n  SingleSelectOption,\n  SingleSelect,\n  Box,\n  Button,\n} from '@strapi/design-system';\nimport { useEffect, useState } from 'react';\nimport { Speciality as Specialty, getSpecialities } from '../api/plugin';\n\nconst HomePage = () => {\n  const [specialities, setSpecialities] = useState<Specialty[]>([]);\n  const [selectValue, setSelectValue] = useState<string | null>(null);\n\n  function getSpecialitiesFromFetch() {\n    const correctedSpecialities: Specialty[] = [];\n    getSpecialities().then((res) => {\n      for (let speciality of res.data) {\n        for (let task of speciality.tasks) {\n          if (speciality.activity && task.activity) {\n            correctedSpecialities.push(speciality);\n          }\n        }\n      }\n\n      setSpecialities(correctedSpecialities);\n    });\n  }\n\n  useEffect(() => {\n    getSpecialitiesFromFetch();\n  }, []);\n\n  return (\n    <Main\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 25,\n        paddingTop: 40,\n        paddingBottom: 40,\n        paddingLeft: 56,\n        paddingRight: 56,\n      }}\n    >\n      <Typography variant=\"beta\" style={{ fontSize: 32, fontWeight: 400, color: '#32324D' }}>\n        Выбор задания\n      </Typography>\n\n      {!specialities.length ? (\n        <Typography style={{ fontWeight: 400, fontSize: 14, color: '#32324D' }}>\n          Для выбора задания необходимо добавить хотя бы одну активную специальность и хотя бы одно\n          активное задания для нее.\n        </Typography>\n      ) : (\n        <>\n          <Box style={{ display: 'flex', flexDirection: 'column', gap: 20 }}>\n            <Typography>Специальность</Typography>\n            <SingleSelect\n              placeholder=\"Выберите специальность\"\n              style={{ width: 640, height: 43 }}\n              value={selectValue}\n              onChange={(val: string | null) => setSelectValue(val)}\n            >\n              {specialities.map((speciality) => {\n                return (\n                  <SingleSelectOption key={speciality.id} value={speciality.documentId}>\n                    {speciality.name}\n                  </SingleSelectOption>\n                );\n              })}\n            </SingleSelect>\n          </Box>\n\n          <Button style={{ width: 270, height: 33 }} disabled={!selectValue}>\n            Сгенерировать ссылку на задание\n          </Button>\n        </>\n      )}\n    </Main>\n  );\n};\n\nexport { HomePage };\n","import { Page } from '@strapi/strapi/admin';\nimport { Routes, Route } from 'react-router-dom';\n\nimport { HomePage } from './HomePage';\n\nconst App = () => {\n  return (\n    <Routes>\n      <Route index element={<HomePage />} />\n      <Route path=\"*\" element={<Page.Error />} />\n    </Routes>\n  );\n};\n\nexport { App };\n"],"names":[],"mappings":";;;;;AA4BA,eAAsB,kBAA2C;AACzD,QAAA,OAAO,MAAM,MAAM,mDAAmD;AAE5E,SAAO,KAAK;AACd;ACrBA,MAAM,WAAW,MAAM;AACrB,QAAM,CAAC,cAAc,eAAe,IAAI,SAAsB,CAAE,CAAA;AAChE,QAAM,CAAC,aAAa,cAAc,IAAI,SAAwB,IAAI;AAElE,WAAS,2BAA2B;AAClC,UAAM,wBAAqC,CAAA;AAC3B,oBAAA,EAAE,KAAK,CAAC,QAAQ;AACrB,eAAA,cAAc,IAAI,MAAM;AACtB,iBAAA,QAAQ,WAAW,OAAO;AAC7B,cAAA,WAAW,YAAY,KAAK,UAAU;AACxC,kCAAsB,KAAK,UAAU;AAAA,UACvC;AAAA,QACF;AAAA,MACF;AAEA,sBAAgB,qBAAqB;AAAA,IAAA,CACtC;AAAA,EACH;AAEA,YAAU,MAAM;AACW;EAC3B,GAAG,CAAE,CAAA;AAGH,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,OAAO;AAAA,QACL,SAAS;AAAA,QACT,eAAe;AAAA,QACf,KAAK;AAAA,QACL,YAAY;AAAA,QACZ,eAAe;AAAA,QACf,aAAa;AAAA,QACb,cAAc;AAAA,MAChB;AAAA,MAEA,UAAA;AAAA,QAAA,oBAAC,YAAW,EAAA,SAAQ,QAAO,OAAO,EAAE,UAAU,IAAI,YAAY,KAAK,OAAO,UAAU,GAAG,UAEvF,iBAAA;AAAA,QAEC,CAAC,aAAa,SACZ,oBAAA,YAAA,EAAW,OAAO,EAAE,YAAY,KAAK,UAAU,IAAI,OAAO,UAAa,GAAA,UAAA,sHAGxE,CAAA,IAGE,qBAAA,UAAA,EAAA,UAAA;AAAA,UAAC,qBAAA,KAAA,EAAI,OAAO,EAAE,SAAS,QAAQ,eAAe,UAAU,KAAK,GAAA,GAC3D,UAAA;AAAA,YAAA,oBAAC,cAAW,UAAa,gBAAA,CAAA;AAAA,YACzB;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,aAAY;AAAA,gBACZ,OAAO,EAAE,OAAO,KAAK,QAAQ,GAAG;AAAA,gBAChC,OAAO;AAAA,gBACP,UAAU,CAAC,QAAuB,eAAe,GAAG;AAAA,gBAEnD,UAAA,aAAa,IAAI,CAAC,eAAe;AAE9B,yBAAA,oBAAC,sBAAuC,OAAO,WAAW,YACvD,UAAW,WAAA,KAAA,GADW,WAAW,EAEpC;AAAA,gBAAA,CAEH;AAAA,cAAA;AAAA,YACH;AAAA,UAAA,GACF;AAAA,UAEC,oBAAA,QAAA,EAAO,OAAO,EAAE,OAAO,KAAK,QAAQ,GAAA,GAAM,UAAU,CAAC,aAAa,UAEnE,kCAAA,CAAA;AAAA,QAAA,GACF;AAAA,MAAA;AAAA,IAAA;AAAA,EAAA;AAIR;AC7EA,MAAM,MAAM,MAAM;AAChB,8BACG,QACC,EAAA,UAAA;AAAA,IAAA,oBAAC,SAAM,OAAK,MAAC,SAAS,oBAAC,WAAS,CAAA,GAAI;AAAA,IACpC,oBAAC,SAAM,MAAK,KAAI,SAAU,oBAAA,KAAK,OAAL,CAAW,CAAA,GAAI;AAAA,EAC3C,EAAA,CAAA;AAEJ;"}